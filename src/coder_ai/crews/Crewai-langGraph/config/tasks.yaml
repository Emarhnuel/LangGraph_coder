process_documentation: 
  description: |
    Process the following LangGraph documentation links:
    - https://langchain-ai.github.io/langgraph/concepts/low_level/
    - https://langchain-ai.github.io/langgraph/concepts/agentic_concepts/
    - https://langchain-ai.github.io/langgraph/concepts/multi_agent/
    - https://langchain-ai.github.io/langgraph/concepts/breakpoints/
    - https://langchain-ai.github.io/langgraph/concepts/human_in_the_loop/
    - https://langchain-ai.github.io/langgraph/concepts/time-travel/
    - https://langchain-ai.github.io/langgraph/concepts/persistence/
    - https://langchain-ai.github.io/langgraph/concepts/memory/
    - https://langchain-ai.github.io/langgraph/concepts/streaming/
    - https://langchain-ai.github.io/langgraph/concepts/functional_api/
    - https://langchain-ai.github.io/langgraph/concepts/durable_execution/
    - https://langchain-ai.github.io/langgraph/concepts/faq/
    - https://langchain-ai.github.io/langgraph/how-tos/state-reducers/
    - https://langchain-ai.github.io/langgraph/how-tos/sequence/
    - https://langchain-ai.github.io/langgraph/how-tos/branching/
    - https://langchain-ai.github.io/langgraph/how-tos/recursion-limit/
    - https://langchain-ai.github.io/langgraph/how-tos/visualization/
    - https://langchain-ai.github.io/langgraph/how-tos/map-reduce/
    - https://langchain-ai.github.io/langgraph/how-tos/command/
    - https://langchain-ai.github.io/langgraph/how-tos/configuration/
    - https://langchain-ai.github.io/langgraph/how-tos/node-retries/
    - https://langchain-ai.github.io/langgraph/how-tos/return-when-recursion-limit-hits/
    - https://langchain-ai.github.io/langgraph/how-tos/persistence/
    - https://langchain-ai.github.io/langgraph/how-tos/subgraph-persistence/
    - https://langchain-ai.github.io/langgraph/how-tos/cross-thread-persistence/
    - https://langchain-ai.github.io/langgraph/how-tos/persistence_postgres/
    - https://langchain-ai.github.io/langgraph/how-tos/persistence_redis/
    - https://langchain-ai.github.io/langgraph/how-tos/persistence-functional/
    - https://langchain-ai.github.io/langgraph/how-tos/cross-thread-persistence-functional/
    - https://langchain-ai.github.io/langgraph/how-tos/memory/manage-conversation-history/
    - https://langchain-ai.github.io/langgraph/how-tos/memory/delete-messages/
    - https://langchain-ai.github.io/langgraph/how-tos/memory/add-summary-conversation-history/
    - https://langchain-ai.github.io/langgraph/how-tos/cross-thread-persistence/
    - https://langchain-ai.github.io/langgraph/how-tos/memory/semantic-search/
    - https://langchain-ai.github.io/langgraph/how-tos/human_in_the_loop/wait-user-input/
    - https://langchain-ai.github.io/langgraph/how-tos/human_in_the_loop/review-tool-calls/
    - https://langchain-ai.github.io/langgraph/how-tos/human_in_the_loop/breakpoints/
    - https://langchain-ai.github.io/langgraph/how-tos/human_in_the_loop/edit-graph-state/
    - https://langchain-ai.github.io/langgraph/how-tos/wait-user-input-functional/#simple-usage
    - https://langchain-ai.github.io/langgraph/how-tos/review-tool-calls-functional/
    - https://langchain-ai.github.io/langgraph/how-tos/human_in_the_loop/time-travel/
    - https://langchain-ai.github.io/langgraph/how-tos/streaming/
    - https://langchain-ai.github.io/langgraph/how-tos/streaming-tokens/
    - https://langchain-ai.github.io/langgraph/how-tos/streaming-specific-nodes/
    - https://langchain-ai.github.io/langgraph/how-tos/streaming-events-from-within-tools/
    - https://langchain-ai.github.io/langgraph/how-tos/streaming-subgraphs/
    - https://langchain-ai.github.io/langgraph/how-tos/disable-streaming/
    - https://langchain-ai.github.io/langgraph/how-tos/tool-calling/
    - https://langchain-ai.github.io/langgraph/how-tos/tool-calling-errors/
    - https://langchain-ai.github.io/langgraph/how-tos/pass-run-time-values-to-tools/
    - https://langchain-ai.github.io/langgraph/how-tos/pass-config-to-tools/
    - https://langchain-ai.github.io/langgraph/how-tos/update-state-from-tools/
    - https://langchain-ai.github.io/langgraph/how-tos/many-tools/
    - https://langchain-ai.github.io/langgraph/how-tos/subgraph/
    - https://langchain-ai.github.io/langgraph/how-tos/subgraphs-manage-state/
    - https://langchain-ai.github.io/langgraph/how-tos/subgraph-transform-state/
    - https://langchain-ai.github.io/langgraph/how-tos/agent-handoffs/
    - https://langchain-ai.github.io/langgraph/how-tos/multi-agent-network/
    - https://langchain-ai.github.io/langgraph/how-tos/multi-agent-multi-turn-convo/
    - https://langchain-ai.github.io/langgraph/how-tos/multi-agent-network-functional/
    - https://langchain-ai.github.io/langgraph/how-tos/multi-agent-multi-turn-convo-functional/
    - https://langchain-ai.github.io/langgraph/how-tos/state-model/
    - https://langchain-ai.github.io/langgraph/how-tos/input_output_schema/
    - https://langchain-ai.github.io/langgraph/how-tos/pass_private_state/
    - https://langchain-ai.github.io/langgraph/how-tos/async/
    - https://langchain-ai.github.io/langgraph/how-tos/react-agent-structured-output/
    - https://langchain-ai.github.io/langgraph/concepts/agentic_concepts/#tool-calling-agent
    - https://langchain-ai.github.io/langgraph/how-tos/create-react-agent/
    - https://langchain-ai.github.io/langgraph/how-tos/create-react-agent-memory/
    - https://langchain-ai.github.io/langgraph/how-tos/create-react-agent-system-prompt/
    - https://langchain-ai.github.io/langgraph/how-tos/create-react-agent-hitl/
    - https://langchain-ai.github.io/langgraph/how-tos/create-react-agent-structured-output/
    - https://langchain-ai.github.io/langgraph/how-tos/memory/semantic-search/#using-in-create-react-agent
    - https://langchain-ai.github.io/langgraph/how-tos/react-agent-from-scratch/
    - https://langchain-ai.github.io/langgraph/how-tos/react-agent-from-scratch-functional/
    - https://langchain-ai.github.io/langgraph/concepts/deployment_options/#bring-your-own-cloud
    - https://langchain-ai.github.io/langgraph/cloud/deployment/setup/
    - https://langchain-ai.github.io/langgraph/cloud/deployment/setup_pyproject/
    - https://langchain-ai.github.io/langgraph/cloud/deployment/semantic_search/
    - https://langchain-ai.github.io/langgraph/cloud/deployment/custom_docker/
    - https://langchain-ai.github.io/langgraph/cloud/deployment/test_locally/
    - https://langchain-ai.github.io/langgraph/cloud/deployment/graph_rebuild/
    - https://langchain-ai.github.io/langgraph/cloud/deployment/cloud/
    - https://langchain-ai.github.io/langgraph/how-tos/deploy-self-hosted/
    - https://langchain-ai.github.io/langgraph/how-tos/use-remote-graph/
    - https://langchain-ai.github.io/langgraph/how-tos/http/custom_lifespan/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/configuration_cloud/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/assistant_versioning/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/background_run/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/same-thread/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/cron_jobs/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/stateless_runs/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/stream_values/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/stream_updates/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/stream_messages/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/stream_events/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/stream_debug/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/stream_multiple/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/generative_ui_react/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/human_in_the_loop_breakpoint/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/human_in_the_loop_user_input/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/human_in_the_loop_edit_state/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/human_in_the_loop_time_travel/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/human_in_the_loop_review_tool_calls/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/interrupt_concurrent/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/webhooks/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/cron_jobs/
    - https://langchain-ai.github.io/langgraph/how-tos/local-studio/
    - https://langchain-ai.github.io/langgraph/cloud/how-tos/test_local_deployment/
    - https://langchain-ai.github.io/langgraph/tutorials/usaco/usaco/#node-1-solver
    - https://langchain-ai.github.io/langgraph/tutorials/introduction/
    - https://langchain-ai.github.io/langgraph/tutorials/workflows/
    - https://langchain-ai.github.io/langgraph/tutorials/langgraph-platform/local-server/
    - https://langchain-ai.github.io/langgraph/concepts/template_applications/
    - https://langchain-ai.github.io/langgraph/cloud/quick_start/
    - https://langchain-ai.github.io/langgraph/tutorials/customer-support/customer-support/
    - https://langchain-ai.github.io/langgraph/tutorials/chatbots/information-gather-prompting/
    - https://langchain-ai.github.io/langgraph/tutorials/rag/langgraph_agentic_rag/
    - https://langchain-ai.github.io/langgraph/tutorials/rag/langgraph_adaptive_rag/
    - https://langchain-ai.github.io/langgraph/tutorials/rag/langgraph_crag/
    - https://langchain-ai.github.io/langgraph/tutorials/rag/langgraph_self_rag/
    - https://langchain-ai.github.io/langgraph/tutorials/sql-agent/
    - https://langchain-ai.github.io/langgraph/tutorials/multi_agent/multi-agent-collaboration/
    - https://langchain-ai.github.io/langgraph/tutorials/multi_agent/agent_supervisor/
    - https://langchain-ai.github.io/langgraph/tutorials/multi_agent/hierarchical_agent_teams/
    - https://langchain-ai.github.io/langgraph/tutorials/plan-and-execute/plan-and-execute/
    - https://langchain-ai.github.io/langgraph/tutorials/rewoo/rewoo/
    - https://langchain-ai.github.io/langgraph/tutorials/llm-compiler/LLMCompiler/
    - https://langchain-ai.github.io/langgraph/tutorials/reflection/reflection/
    - https://langchain-ai.github.io/langgraph/tutorials/tot/tot/
    - https://langchain-ai.github.io/langgraph/tutorials/lats/lats/
    - https://langchain-ai.github.io/langgraph/tutorials/self-discover/self-discover/ 
    - https://langchain-ai.github.io/langgraph/tutorials/agent-orchestration/agent-orchestration/
     
     
    
    Extract comprehensive information about LangGraph components, patterns, and best practices
    relevant to building a {agent_type} AI agent. Focus on understanding core concepts, implementation
    details, and practical usage examples.
    
    IMPORTANT: For each page, identify and analyze all images/diagrams present in the documentation.
    Use your multimodal capabilities to:
    1. Describe what each image shows and its significance
    2. Extract any workflow or architectural information from diagrams
    3. Note any code examples or patterns shown in images
    4. Relate the visual information to the surrounding textual context
    
    Pay particular attention to diagrams showing LangGraph flows, state management patterns,
    and agent architectures as these are crucial for understanding the framework.
  expected_output: |
    A set of well-organized markdown files containing comprehensive information from the
    LangGraph documentation, including both textual and visual content, with emphasis on
    components relevant to building a {agent_type} AI agent.
    
    Each file should include detailed descriptions of images and diagrams found in the
    documentation, explaining their significance, the patterns they illustrate, and how
    they relate to practical implementation of LangGraph components.
  agent: documentation_processor



plan_langgraph_concepts:
  description: |
    Based on the user's description of the {agent_type} AI agent they want to build,
    identify and propose the most appropriate LangGraph concepts, patterns, and components
    that would be used to implement this solution.
    
    Consider factors such as:
    1. The complexity and nature of the agent's decision-making process
    2. State management requirements
    3. Need for human-in-the-loop capabilities
    4. Multi-agent coordination requirements
    5. Tool integration patterns
    6. Error handling and recursion needs
    
    Present your recommendations to the user in a clear, structured format that explains
    why each concept or pattern is appropriate for their specific use case.
  expected_output: |
    A comprehensive plan outlining the specific LangGraph concepts, patterns, and components
    that will be used to implement the {agent_type} AI agent, along with a brief explanation
    of why each was selected. This plan should be approved by the user before proceeding
    to implementation.
  agent: langgraph_concept_planner
  context: [process_documentation]
  human_input: true



generate_code:
  description: |
    Based on the organized knowledge base, implement a LangGraph flow for a {agent_type} AI agent that:
    1. Creates a multi-step workflow with at least three nodes
    2. Implements proper state management using Pydantic models
    3. Includes conditional branching logic appropriate for a {agent_type} agent
    4. Handles errors gracefully
    5. Includes comprehensive documentation
    
    The agent should be specifically designed to function as a {agent_type} AI agent,
    with all functionality and behavior optimized for this purpose.
    
    IMPORTANT: Ensure the following files are created in the output directory at {agent_code_dir}:
    
    1. README.md - A comprehensive documentation file that includes:
       - Overview of the implementation
       - Step-by-step installation instructions including required dependencies
       - Configuration instructions (API keys, environment variables)
       - Usage examples with command-line arguments
       - Explanation of the file structure
       - Troubleshooting tips
    
    2. requirements.txt - A file listing all required dependencies with version numbers
    
    For the actual code implementation, organize the code in a clean, modular structure with proper separation of concerns.
    You should determine the appropriate file structure based on the specific needs of the {agent_type} AI agent.
    Common patterns include separating models, workflow nodes, graph definition, utilities, and configuration into
    distinct modules, but you have flexibility to organize as appropriate for the implementation.
    
    Each file should be well-documented with docstrings and comments explaining the code.
    Make sure all Python files include proper imports and can be run independently when appropriate.
    
    After writing the code, execute it to verify functionality and fix any issues.
    Write clean, efficient, and well-documented code that follows LangGraph best practices.
  expected_output: |
    Fully functional, well-documented LangGraph code that implements a {agent_type} AI agent, with all code saved to the output directory and organized in a clean, modular structure. The implementation should include proper error handling, documentation, and be ready for production use.
  agent: langgraph_coder
  context: [plan_langgraph_concepts, process_documentation]
  human_input: true
